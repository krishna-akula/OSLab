#include <bits/stdc++.h>
using namespace std;

#define v 29
#define m 30
#define r 31
/* the struct ure of page table */
struct page_table
{
    vector<bitset<32> >entry;
    page_table()
    {}
    page_table(int no_pages)
    {
        entry.resize(no_pages);
    }
};
int no_of_pages;

// /* generating the instructions */
// void gen_instructions(int no_references,int prob,int work_sets)
// {
//     ofstream myfile;
//     int rw;
//     int page;
//     int genprob;
//     deque<int> ws;//working set
//     myfile.open("input.txt");
//     /* initially creating present working set */
//     for(int i=0;i<work_sets;i++)
//     {
//         rw=rand()%2;
//         page=rand()%no_of_pages;
//         ws.push_back(page);
//         myfile<<rw<<" "<<page<<"\n";

//     }
//     for(int i=0;i<no_references-work_sets;i++)
//     {
//         rw=rand()%2;
//         genprob=rand()%101;
//         if(genprob>prob)
//         {
//             page =rand()%ws.size();
//             page = *(ws.begin()+page);
//             ws.pop_front();
//             ws.push_back(page);

//         }
//         else
//         {
//             page=rand()%no_of_pages;
//             while(find(ws.begin(),ws.end(),page)!=ws.end())
//             {
//                 page=rand()%no_of_pages;            
//             }
//         }
//         myfile<<rw<<" "<<page<<"\n";        
//     }
     
//     myfile.close();
// }


/* printing operations */
void print_op(int type,int line,int page,int frame_no)
{
    cout<<"line:"<<line<<":  ";
    switch(type)
    {
        case 1:
            cout<<"UNMAP:\t";
            cout<<page<<"  ";
            cout<<frame_no<<"  ";   
            break;
        case 2:
            cout<<"MAP:\t";
            cout<<page<<"  ";
            cout<<frame_no<<"  ";
            break;
        case 3:
            cout<<"IN:\t";
            cout<<page<<"  ";
            cout<<frame_no<<"  ";
            break;
        case 4:
            cout<<"OUT:\t";
            cout<<page<<"  ";
            cout<<frame_no<<"  ";
            break;
    }
    cout<<endl;
}

/* getting the free frame */
int get_free(vector<bool>&frames)
{
    for(int i=0;i<frames.size();i++)
    {
       if(frames[i]==0)
       {
           frames[i]=1;
           return i;
       }
    }
    return -1;
}
void set_frame(int page_no,int frame_no,page_table &pt)
{
    bitset<29>frm_b(frame_no);
    for(int i=0;i<29;i++)
    {
        pt.entry[page_no][i]=frm_b[i];
    }
}

int get_victim(page_table &pt,int page_no)
{
    bitset<29>frm_b;
    for(int i=0;i<29;i++)
    {
       frm_b[i]= pt.entry[page_no][i];
    }
    return (int)frm_b.to_ulong();
}

void fifo(int tot_fram)
{
    page_table pt(no_of_pages);
    /* list of free frames */
    vector<bool>frames(tot_fram);
    int page_faults=0;
    int page_transfers=0;
    int total_cost=0;
    ifstream myfile;
    myfile.open("input.txt");
    deque <int> q;
    /* virtual address generated by the cpu */
    string va; 
    int line=1;
    while(!myfile.eof())
    {
        getline(myfile,va);
        if(va[0]=='#')
        {
            continue;
        }
        int pg_no,rw;
        sscanf(va.c_str(),"%d%d",&rw,&pg_no);
        if(pt.entry[pg_no][v]==1)
        {
            /* if the page is valid */
            pt.entry[pg_no][r]=1;    
            pt.entry[pg_no][m]= ((rw==1)?1:pt.entry[pg_no][m]);        
            typeof(q.begin()) temp=find(q.begin(),q.end(),pg_no);
            q.erase(temp);
            q.push_back(pg_no);
            total_cost+=1;

        }
        else
        {
            /* if the page is invalid */
            page_faults++;
            total_cost+=1;            
            int frame_no=get_free(frames);
            if(frame_no!=-1)
            {
                /* if there is a free frame */
                frames[frame_no]=1;
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                page_transfers++;
                total_cost+=250+3000;
            }
            else
            {
                /* there are no free frames */
                int victim=q.front();
                /* take the first frame */
                q.pop_front();
                /* get the frame number */
                frame_no=get_victim(pt,victim);
                /* unmapping and printing into disk */
                print_op(1,line,victim,frame_no);
                pt.entry[victim][v]=0;//making the entry unvalid
                total_cost+=250;
                if(pt.entry[victim][m]==1)
                {
                   
                    print_op(4,line,victim,frame_no);
                    page_transfers++;
                    total_cost+=3000;
                }

                /* writing and loading into virtual memory */
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][r]=1;                
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                total_cost+=250+3000;                
                page_transfers++;

            }
        }
        
        line++;
    }
    myfile.close();    
    /* printing statistics */
    cout<<"page faults:  "<<page_faults<<endl;
    cout<<"page_transfers:  "<<page_transfers<<endl;
    cout<<"total cost :  "<<total_cost<<endl;
        
}


void rand_rep(int tot_fram)
{
     page_table pt(no_of_pages);
    /* list of free frames */
    vector<bool>frames(tot_fram);
    int page_faults=0;
    int page_transfers=0;
    int total_cost=0;
    ifstream myfile;
    myfile.open("input.txt");
    vector <int> q;
    /* virtual address generated by the cpu */
    string va; 
    int line=1;
    while(!myfile.eof())
    {
        getline(myfile,va);
        if(va[0]=='#')
        {
            continue;
        }
        int pg_no,rw;
        sscanf(va.c_str(),"%d%d",&rw,&pg_no);
        if(pt.entry[pg_no][v]==1)
        {
            /* if the page is valid */
            pt.entry[pg_no][r]=1;    
            pt.entry[pg_no][m]= ((rw==1)?1:pt.entry[pg_no][m]);        
            total_cost+=1;

        }
        else
        {
            /* if the page is invalid */
            page_faults++;
            total_cost+=1;            
            int frame_no=get_free(frames);
            if(frame_no!=-1)
            {
                /* if there is a free frame */
                frames[frame_no]=1;
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                pt.entry[pg_no][r]=1;                                
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                page_transfers++;
                total_cost+=250+3000;
            }
            else
            {
                /* there are no free frames */
                int rand_ch = rand()%(q.size());
                int victim=q[rand_ch];
                q.erase(q.begin()+rand_ch);


                /* take the first frame */
                frame_no=get_victim(pt,victim);

                /* unmapping and printing into disk */
                print_op(1,line,victim,frame_no);
                pt.entry[victim][v]=0;
                total_cost+=250;
                if(pt.entry[victim][m]==1)
                {
                   
                    print_op(4,line,victim,frame_no);
                    page_transfers++;
                    total_cost+=3000;
                }

                /* writing and loading into virtual memory */
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][r]=1;                
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                total_cost+=250+3000;                
                page_transfers++;

            }
        }
        
        line++;
    }
    myfile.close();    
    /* printing statistics */
    cout<<"page faults:\t"<<page_faults<<endl;
    cout<<"page_transfers:\t"<<page_transfers<<endl;
    cout<<"total cost :\t"<<total_cost<<endl;
}



void lru(int tot_fram)
{
    page_table pt(no_of_pages);
    /* list of free frames */
    vector<bool>frames(tot_fram);
    int page_faults=0;
    int page_transfers=0;
    int total_cost=0;
    ifstream myfile;
    ofstream ofile;
    ofile.open("page_lru.txt");
    myfile.open("input.txt");
    deque <int> q;
    /* virtual address generated by the cpu */
    string va; 
    int line=1;
    while(!myfile.eof())
    {
        getline(myfile,va);
        if(va[0]=='#')
        {
            continue;
        }
        int pg_no,rw;
        sscanf(va.c_str(),"%d%d",&rw,&pg_no);
        if(pt.entry[pg_no][v]==1)
        {
            /* if the page is valid */
            pt.entry[pg_no][r]=1;    
            pt.entry[pg_no][m]= ((rw==1)?1:pt.entry[pg_no][m]);        
            typeof(q.begin()) temp=find(q.begin(),q.end(),pg_no);
            q.erase(temp);
            q.push_front(pg_no);
            total_cost+=1;

        }
        else
        {
            /* if the page is invalid */
            page_faults++;
            total_cost+=1;            
            int frame_no=get_free(frames);
            if(frame_no!=-1)
            {
                /* if there is a free frame */
                frames[frame_no]=1;
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                pt.entry[pg_no][r]=1;                
                
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_front(pg_no);
                page_transfers++;
                total_cost+=250+3000;
            }
            else
            {
                /* there are no free frames */
                int victim=q.back();
                /* take the first frame */
                q.pop_back();
                /* get the frame number */
                frame_no=get_victim(pt,victim);
                /* unmapping and printing into disk */
                print_op(1,line,victim,frame_no);
                pt.entry[victim][v]=0;//making the entry unvalid in page table
                total_cost+=250;
                if(pt.entry[victim][m]==1)
                {
                   
                    print_op(4,line,victim,frame_no);
                    page_transfers++;
                    total_cost+=3000;
                }

                /* writing and loading into virtual memory */
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][r]=1;                
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_front(pg_no);
                total_cost+=250+3000;                
                page_transfers++;

            }
        }
        ofile<<page_faults<<endl;
        
        line++;
    }
    ofile.close();
    myfile.close();
    /* printing statistics */
    cout<<"page faults:\t"<<page_faults<<endl;
    cout<<"page_transfers:\t"<<page_transfers<<endl;
    cout<<"total cost :\t"<<total_cost<<endl;
        
}

void reset_references(page_table &pt)
{
    for(int i=0;i<no_of_pages;i++)
    {
        if(pt.entry[i][v]==1)
        {
            pt.entry[i][r]=0;
        }
    }
}

int get_victim(page_table &pt)
{
    vector<int> c1,c2,c3,c4;

    for(int i=0;i<no_of_pages;i++)
    {
        if(pt.entry[i][r]==0 and pt.entry[i][m]==0 and pt.entry[i][v]==1)
        {
            c1.push_back(i);
        }
        if(pt.entry[i][r]==0 and pt.entry[i][m]==1 and pt.entry[i][v]==1)
        {
            c2.push_back(i);
        }
        if(pt.entry[i][r]==1 and pt.entry[i][m]==0 and pt.entry[i][v]==1)
        {
            c3.push_back(i);
        }
        if(pt.entry[i][r]==1 and pt.entry[i][m]==1 and pt.entry[i][v]==1)
        {
            c4.push_back(i);
        }

    }
    if(c1.size()!=0)
    {
        int ch=rand()%c1.size();
        return c1[ch];        
    }
    if(c2.size()!=0)
    {
        int ch=rand()%c2.size();        
        return c2[ch];
        
    }
    if(c3.size()!=0)
    {
        int ch=rand()%c3.size();
        return c3[ch];        
    }
    if(c4.size()!=0)
    {
        int ch=rand()%c4.size();        
        return c4[ch];        
    }
}

void nru(int tot_fram)//not recently used
{
    page_table pt(no_of_pages);
    /* list of free frames */
    vector<bool>frames(tot_fram);
    int page_faults=0;
    int page_transfers=0;
    int total_cost=0;
    ifstream myfile;
    myfile.open("input.txt");
    /* virtual address generated by the cpu */
    string va; 
    int line=1;
    while(!myfile.eof())
    {
        getline(myfile,va);
        if(va[0]=='#')
        {
            continue;
        }
        int pg_no,rw;
        sscanf(va.c_str(),"%d%d",&rw,&pg_no);
        if(pt.entry[pg_no][v]==1)
        {
            /* if the page is valid */
            pt.entry[pg_no][r]=1;    
            pt.entry[pg_no][m]= ((rw==1)?1:pt.entry[pg_no][m]);        
            total_cost+=1;


        }
        else
        {
            /* if the page is invalid */
            page_faults++;
            total_cost+=1;            
            if(page_faults%10==0)
            {
                reset_references(pt);
            }
            int frame_no=get_free(frames);
            if(frame_no!=-1)
            {
                /* if there is a free frame */
                frames[frame_no]=1;
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                pt.entry[pg_no][r]=1;
                page_transfers++;
                total_cost+=250+3000;
                set_frame(pg_no,frame_no,pt);                
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
            }
            else
            {
                /* there are no free frames */
                int victim=get_victim(pt);
                /* take the first frame */
                /* get the frame number */
                frame_no=get_victim(pt,victim);
                /* unmapping and printing into disk */
                print_op(1,line,victim,frame_no);
                pt.entry[victim][v]=0;//making the entry unvalid in page table
                total_cost+=250;
                if(pt.entry[victim][m]==1)
                {
                   
                    print_op(4,line,victim,frame_no);
                    page_transfers++;
                    total_cost+=3000;
                }
                /* writing and loading into virtual memory */
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][r]=1;                
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                total_cost+=250+3000;                
                page_transfers++;

            }
        }
        
        line++;
    }

    myfile.close();    
    /* printing statistics */
    cout<<"page faults:\t"<<page_faults<<endl;
    cout<<"page_transfers:\t"<<page_transfers<<endl;
    cout<<"total cost :\t"<<total_cost<<endl;

}

int get_victim_sc(page_table &pt,deque<int>&q)
{
    int temp=-1;
    while(temp==-1)
    {
        int f=q.front();
        q.pop_front();
        if(pt.entry[f][r]==1)
        {
            pt.entry[f][r]=0;
            q.push_back(f);
        } 
        else
        {
            temp=f;
        }
    }
    return temp;

}

void sc(int tot_fram)
{
    page_table pt(no_of_pages);
    /* list of free frames */
    vector<bool>frames(tot_fram);
    int page_faults=0;
    int page_transfers=0;
    int total_cost=0;
    ifstream myfile;
    myfile.open("input.txt");
    deque <int> q;
    /* virtual address generated by the cpu */
    string va; 
    int line=1;
    while(!myfile.eof())
    {
        getline(myfile,va);
        if(va[0]=='#')
        {
            continue;
        }
        int pg_no,rw;
        sscanf(va.c_str(),"%d%d",&rw,&pg_no);
        if(pt.entry[pg_no][v]==1)
        {
            /* if the page is valid */
            pt.entry[pg_no][r]=1;    
            pt.entry[pg_no][m]= ((rw==1)?1:pt.entry[pg_no][m]);        
            typeof(q.begin()) temp=find(q.begin(),q.end(),pg_no);
            q.erase(temp);
            q.push_back(pg_no);
            total_cost+=1;

        }
        else
        {
            /* if the page is invalid */
            page_faults++;
            total_cost+=1;            
            int frame_no=get_free(frames);
            if(frame_no!=-1)
            {
                /* if there is a free frame */
                frames[frame_no]=1;
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][m]= ((rw==1)?1:0);
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                page_transfers++;
                total_cost+=250+3000;
            }
            else
            {
                /* there are no free frames */
                int victim=get_victim_sc(pt,q);
                /* get the frame number */
                frame_no=get_victim(pt,victim);
                /* unmapping and printing into disk */
                print_op(1,line,victim,frame_no);
                pt.entry[victim][v]=0;//making the entry unvalid
                total_cost+=250;
                if(pt.entry[victim][m]==1)
                {
                   
                    print_op(4,line,victim,frame_no);
                    page_transfers++;
                    total_cost+=3000;
                }

                /* writing and loading into virtual memory */
                pt.entry[pg_no][v]=1;
                pt.entry[pg_no][r]=1;                
                pt.entry[pg_no][m]=rw;
                set_frame(pg_no,frame_no,pt);
                print_op(3,line,pg_no,frame_no);
                print_op(2,line,pg_no,frame_no);
                q.push_back(pg_no);
                total_cost+=250+3000;                
                page_transfers++;

            }
        }
        
        line++;
    }
    myfile.close();    
    /* printing statistics */
    cout<<"page faults:\t"<<page_faults<<endl;
    cout<<"page_transfers:\t"<<page_transfers<<endl;
    cout<<"total cost :\t"<<total_cost<<endl;

}

int main()
{
    cout<<"no of pages\n";
    cin>>no_of_pages;
    int frames_total;
    cout<<"total_frames\n";
    cin>>frames_total;
    cout<<"---------------------------fifo----------------------------------\n";
    fifo(frames_total);
    cout<<"-------------------------random_selection-------------------------\n";
    rand_rep(frames_total);
    cout<<"-------------------------least_recently_used-------------------------\n";
    lru(frames_total);
    cout<<"---------------------------nru---------------------------------------\n";
    nru(frames_total);
    cout<<"---------------------------second_chance---------------------------------------\n";
    sc(frames_total);
}
